#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# Version Python 2.7.*

import os, sys, subprocess
import time

os.system("clear")

print
print "  6MMMMb\  6MMMMb/  6MMMMb  `MM 6MMb  6MMb  `MM    MM "
print " MM'    ` 6M'  `MM 6M'  `Mb  MM69 `MM69 `Mb  MM    MM "
print " YM.      MM    MM MM    MM  MM'   MM'   MM  MM    MM "
print "  YMMMMb  MM    MM MMMMMMMM  MM    MM    MM  MM    MM "
print "      `Mb MM    MM MM        MM    MM    MM  MM    MM "
print " L    ,MM YM.  ,MM YM        MM    MM    MM  YM.   MM "
print " MYMMMM9   YMMMM9M  YMMMMM9  MM    MM    MM   YMMM9MM "
print "                MM                                    "
print "                MM            \script qemu/           "
print "                MM            /code alexis\           "
print

print "sQemu versione a 64bit"
print "----------------------"
print
print "[1] Creare disco"
print "[2] Converti disco in IMG"
print "[3] Converti disco da IMG a VMDK"
print "[4] Ridimensiona disco"
print "[5] Avviare disco"
print "[6] Avviare dischi multipli"
print "[7] CD Live"
print "[8] CD Live con dischi multipi"
print "[9] Avvio shell"
print
print "[10] SPICE"
print
print "[11] Apri Cartella"
print "[12] Lista sistemi installati"
print
print "[13] Installa Plugins"
print
print "[0] Uscire"
print
print

###############################################################################
# ATTENZIONE:                                                                 #
# Il comando di esecuzione può variare sia dal tipo di distro che utilizziamo #
# e sia dal tipo d'installazione che abbiamo effettuato per qemu e kvm.       #
# Le possibili varianti di lancio sono le seguenti:                           #
# qemu - qemu-system-x86 - qemu-system-x86_64 - kvm                           #
#                                                                             #
# Attualmente questo programma utilizza come                                  #
# lanciatore il comando qemu-system-x86_64 per il 64bit                       #
###############################################################################

try:
        select = input(": ")
        if select >=14:
                print "Opzione non trovata!"
                raw_input("Premere un tasto per contiuare")
                os.system("./sqemu64")
except NameError:
        print "Comando non valido!"
        raw_input("Premere un tasto per continuare")
        os.system("./sqemu64")

def close():
	if select == 0:
		os.system("clear")
		return
close()

def start():
	if select == 5:
		var1 = raw_input("Nome del disco creato: ")
		var2 = raw_input("Quanta RAM? (es. 512M o 2047M) ")
		var3 = input("Numero di CPU/Core da dedicare: ")
		os.system("xdotool windowminimize $(xdotool getactivewindow); qemu-system-x86_64 --enable-kvm -smp %s -vga vmware -netdev tap,id=t0,ifname=tap0,script=no,downscript=no -device e1000,netdev=t0,id=nic0 -hda %s.img -m %s"%(var3,var1,var2))
		os.system("./sqemu64")
start()

def disco():
	if select == 1:
		var1 = raw_input("Nome del disco da creare: ")
		var2 = raw_input("Capacità disco: (G=Giga M=Mega es. 8G) ")
		os.system("qemu-img create %s.img %s"%(var1,var2))
		os.system("./sqemu64")
disco()

def convertimg():
	if select == 2:
		var1 = raw_input("Inserire l'estensione origine: (raw/qcow2/vdi/vmdk/vpc/dmg) ")
		var2 = raw_input("Inserire il nome del disco origine con estensione: ")
		print
                if var1 == "dmg":
                    print
                    print "ATTENDERE PREGO..."
                    print
                    os.system("dmg2img %s"%(var2))
                    os.system("./sqemu64")
                else:
                    var3 = raw_input("Dare il nome al nuovo disco: ")
                    print
                    print "ATTENDERE PREGO..."
                    print
                    os.system("qemu-img convert -f %s -O raw %s %s.img"%(var1,var2,var3))
                    os.system("./sqemu64")
convertimg()

def convertvmdk():
	if select == 3:
		var1 = raw_input("Inserire il nome del disco origine senza estensione: ")
		var2 = raw_input("Dare il nome al nuovo disco: ")
		print
		print "ATTENDERE PREGO..."
		os.system("qemu-img convert -f raw -O vmdk %s.img %s.vmdk"%(var1,var2))
		os.system("./sqemu64")
convertvmdk()

def live():
	if select == 7:
		var1 = raw_input("Nome del disco creato: ")
		var2 = raw_input("Nome CD Iso: ")
		os.system("xdotool windowminimize $(xdotool getactivewindow); qemu-system-x86_64 --enable-kvm -hda %s.img -vga vmware -soundhw all -boot d -cdrom %s.iso -m 512"%(var1,var2))
		os.system("./sqemu64")
live()

def sistemi():
	if select == 12:
		subprocess.call("ls *.img", shell=True)
		print
		restart = raw_input("Premere INVIO per continuare")
		os.system("./sqemu64")
sistemi()

def folder():
	if select == 11:
		os.system("thunar")
		os.system("./sqemu64")
folder()

def plugin():
	if select == 13:
		subprocess.call("sudo apt-get install xdotool && sudo apt-get install dmg2img", shell=True)
		print
		print "Installazione completata!"
		print
		time.sleep(3)
		restart = raw_input("Premere INVIO per continuare")
		os.system("./sqemu64")
plugin()

def dischi():
	if select == 6:
		var1 = raw_input("Nome del disco primario: ")
		var2 = raw_input("Nome del disco secondario: ")
		var3 = raw_input("Quanta RAM? (es. 512M o 2047M) ")
		var4 = input("Numero di CPU/Core da dedicare: ")
		os.system("xdotool windowminimize $(xdotool getactivewindow); qemu-system-x86_64 --enable-kvm -smp %s -vga vmware -netdev tap,id=t0,ifname=tap0,script=no,downscript=no -device e1000,netdev=t0,id=nic0 -soundhw all -hda %s.img -hdb %s.img -m %s"%(var4,var1,var2,var3))
		os.system("./sqemu64")
dischi()

def livemulti():
	if select == 8:
		var1 = raw_input("Nome del disco primario: ")
		var3 = raw_input("Nome del disco secondario: ")
		var2 = raw_input("Nome CD Iso: ")
		os.system("xdotool windowminimize $(xdotool getactivewindow); qemu-system-x86_64 --enable-kvm -hda %s.img -hdb %s.img -vga std -soundhw all -boot d -cdrom %s.iso -m 512"%(var1,var3,var2))
		os.system("./sqemu64")
livemulti()

def resize():
	if select == 4:
		var1 = raw_input("Nome del disco da ridimensiona: ")
		var2 = raw_input("Nuova capacità disco: (G=Giga M=Mega es. 8G) ")
		os.system("qemu-img resize %s.img %s"%(var1,var2))
		os.system("./sqemu64")
resize()

def spice():
	if select == 10:
		var1 = raw_input("Nome del disco creato: ")
		var2 = raw_input("Quanta RAM? (es. 512M o 2047M) ")
		var3 = input("Numero di CPU/Core da dedicare: ")
		os.system("xdotool windowminimize $(xdotool getactivewindow); kvm --enable-kvm -smp %s -vga vmware -soundhw all -spice port=5900,addr=127.0.0.1,disable-ticketing -hda %s.img -m %s"%(var3,var1,var2))
		os.system("./sqemu64")
spice()

# L'opzione successivo è valido solo per sistemi operativi minimali, cioè con la sola shell.
# Nominare l'immagine in shell.img
# Una volta avviata la shell editare il file /etc/default/grub e aggiungere l'opzione per variare la risoluzione:
# GRUB_GFXMODE=1024x764x32
# GRUB_GFXPAYLOAD_LINUX=keep o 1024x764

def shell():
	if select == 9:
		var1 = raw_input("Quanta RAM? (es. 512M o 2047M) ")
		var2 = input("Numero di CPU/Core da dedicare: ")
		os.system("xdotool windowminimize $(xdotool getactivewindow); qemu-system-x86_64 --enable-kvm -smp %s -vga vmware -netdev tap,id=t0,ifname=tap0,script=no,downscript=no -device e1000,netdev=t0,id=nic0 -hda shell.img -m %s"%(var2,var1))
		os.system("./sqemu64")
shell()
