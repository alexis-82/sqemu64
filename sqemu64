#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# Version Python 2.7.*

import os, sys, subprocess
import time
import random
import re


sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=40, cols=100))

class bcolors:
    OKGREEN = '\033[92m'
    ENDC = '\033[0m'

log = os.system("grep -wom1 'sudo' $HOME/.bash_history > id")
check = open("id", "r")
root = check.read(4 - 0)

if root == "sudo":
    os.system("clear")
    print
    print "Attivazione del module KVM"
    print "--------------------------"
    os.system("sudo modprobe kvm")
    os.system("sudo modprobe kvm-intel")
else:
    os.system("clear")
    print
    print "Attivazione del module KVM"
    print "--------------------------"
    os.system("su root -c 'modprobe kvm'")
    os.system("su root -c 'modprobe kvm-intel'")

os.system("clear")

print
print "  6MMMMb\  6MMMMb/  6MMMMb  `MM 6MMb  6MMb  `MM    MM "
print " MM'    ` 6M'  `MM 6M'  `Mb  MM69 `MM69 `Mb  MM    MM "
print " YM.      MM    MM MM    MM  MM'   MM'   MM  MM    MM "
print "  YMMMMb  MM    MM MMMMMMMM  MM    MM    MM  MM    MM "
print "      `Mb MM    MM MM        MM    MM    MM  MM    MM "
print " L    ,MM YM.  ,MM YM        MM    MM    MM  YM.   MM "
print " MYMMMM9   YMMMM9M  YMMMMM9  MM    MM    MM   YMMM9MM "
print "                MM                                    "
print "                MM            \script qemu/           "
print "                MM            /code alexis\           "
print

print bcolors.OKGREEN + "sQemu versione a 64bit" + bcolors.ENDC
print bcolors.OKGREEN + "----------------------" + bcolors.ENDC
print
print "[1] Creare disco"
print "[2] Converti disco in IMG"
print "[3] Converti disco da IMG a VMDK"
print "[4] Ridimensiona disco"
print "[4.5] Clona disco"
print "[5] Avviare disco"
print "[6] Avviare dischi multipli"
print "[7] CD Live"
print "[8] CD Live con dischi multipi"
print "[9] Avvio shell"
print
print "[10] SPICE"
print
print "[11] Apri Cartella"
print "[12] Lista sistemi installati"
print
print "[13] Installa Plugins"
print
print "[0] Uscire"
print
print

###############################################################################
# ATTENZIONE:                                                                 #
# Il comando di esecuzione può variare sia dal tipo di distro che utilizziamo #
# e sia dal tipo d'installazione che abbiamo effettuato per qemu e kvm.       #
# Le possibili varianti di lancio sono le seguenti:                           #
# qemu - qemu-system-x86 - qemu-system-x86_64 - kvm                           #
#                                                                             #
# Attualmente questo programma utilizza come                                  #
# lanciatore il comando qemu-system-x86_64 per il 64bit                       #
#																			  #
#																			  #
#																			  #
#																              #
#																			  #
#                                                                             #
#                                                                             #
# Virtualizzazione schede video:                                              #
# -vga cirrus                                                                 #
# -vga std                                                                    #
# -vga qxl                                                                    #
# -vga none -device qxl-vga,vgamem_mb=64,vram_size_mb=64                      #
# -vga vmware                                                                 #
# (apt install open-vm-tools-desktop -- apt install open-vm-tools)            #
#																			  #
#																			  #  
#    							       		  							      #
#									   									      #
# Virtualizzazione schede video:					                          #
# -vga cirrus								                                  #
# -vga std								                                      #
# -vga qxl								                                      #
# -vga none -device qxl-vga,vgamem_mb=64,vram_size_mb=64  		              #
# -vga vmware								      							  #
# (apt install open-vm-tools-desktop -- apt install open-vm-tools)	          #
#																		      #
# 																			  #
# 									      									  #
#    							       		      							  #
#									      									  #
# Virtualizzazione schede video:					      					  #
# -vga cirrus								      					 		  #
# -vga std								      								  #
# -vga qxl								      								  #
# -vga none -device qxl-vga,vgamem_mb=64,vram_size_mb=64  		      		  #
# -vga vmware								      							  #
# (apt install open-vm-tools-desktop -- apt install open-vm-tools)	          #
#								              								  #
#																			  #
###############################################################################

try:
        select = input(": ")
        if select >=14.0:
                print "Opzione non trovata!"
                raw_input("Premere un tasto per contiuare")
                os.system("./sqemu64")
except NameError:
        print "Comando non valido!"
        raw_input("Premere un tasto per continuare")
        os.system("./sqemu64")

def close():
	if select == 0:
		os.system("clear & exit")
		#return
close()

# L'opzione -vnc :5 sta per la porta 590(5), lanciare la connesione con vinagre ip:5905 & oppure (x)vncviewer ip:5905 & 
def start():
	if select == 5:
		var1 = raw_input("Nome del disco creato: ")
		var2 = raw_input("Quanta RAM? (es. 512M o 2047M) ")
		var3 = input("Numero di CPU/Core da dedicare: ")
		usb = raw_input("Avviare con device Usb? ")
		if usb in ('si', 's'):
		  print "Inserire la chiavetta USB e lanciare il comando: dmesg | grep usb | grep idVendor"
                  date1 = raw_input("idVendor= ")
                  date2 = raw_input("idProduct= ")
		  val1=(random.randrange(10,99))
		  os.system("xdotool windowminimize $(xdotool getactivewindow);qemu-system-x86_64 --enable-kvm -cpu host -smp %s  -boot menu=on -vga cirrus -net tap -net nic,macaddr=52:54:00:12:34:%d,model=e1000 -hda %s.img -m %s -usb -usbdevice host:%s:%s  "%(var3,val1,var1,var2,date1,date2))
		  os.system("./sqemu64")
		if usb in ('no', 'n'):
		  val1=(random.randrange(10,99))
		  os.system("xdotool windowminimize $(xdotool getactivewindow);qemu-system-x86_64 --enable-kvm -cpu host -smp %s -boot menu=on -vga vmware -net tap -net nic,macaddr=52:54:00:12:34:%d,model=e1000 -hda %s.img -m %s "%(var3,val1,var1,var2))
		  os.system("./sqemu64")
start()

def disco():
	if select == 1:
		var1 = raw_input("Nome del disco da creare: ")
		var2 = raw_input("Capacità disco: (G=Giga M=Mega es. 8G) ")
		os.system("qemu-img create -f qcow2 %s.img %s"%(var1,var2))
		os.system("./sqemu64")
disco()

def convertimg():
	if select == 2:
		var1 = raw_input("Inserire l'estensione origine: (raw/qcow2/vdi/vmdk/vpc/dmg) ")
		var2 = raw_input("Inserire il nome del disco origine con estensione: ")
		print
                if var1 == "dmg":
                    print
                    print "ATTENDERE PREGO..."
                    print
                    os.system("dmg2img %s"%(var2))
                    os.system("./sqemu64")
                else:
                    var3 = raw_input("Dare il nome al nuovo disco senza estensione: ")
                    print
                    print "ATTENDERE PREGO..."
                    print
                    os.system("qemu-img convert -f %s -O raw %s %s.img"%(var1,var2,var3))
                    os.system("./sqemu64")
convertimg()

def convertvmdk():
	if select == 3:
		var1 = raw_input("Inserire il nome del disco origine senza estensione: ")
		var2 = raw_input("Dare il nome al nuovo disco: ")
		print
		print "ATTENDERE PREGO..."
		os.system("qemu-img convert -f raw -O vmdk %s.img %s.vmdk"%(var1,var2))
		os.system("./sqemu64")
convertvmdk()

def live():
	if select == 7:
		var1 = raw_input("Nome del disco creato: ")
		var2 = raw_input("Nome CD Iso: ")
		usb = raw_input("Avviare con device Usb? ")
		if usb in ('si', 's'):
		  print "Inserire la chiavetta USB e lanciare il comando: dmesg | grep usb | grep idVendor"
                  date1 = raw_input("idVendor= ")
                  date2 = raw_input("idProduct= ")
		  val1=(random.randrange(10,99))
		  os.system("xdotool windowminimize $(xdotool getactivewindow); qemu-system-x86_64 --enable-kvm -cpu host -smp cores=2 -hda %s.img -boot menu=on -vga vmware -net tap -net nic,macaddr=52:54:00:12:34:%d,model=e1000 -soundhw all -usb -usbdevice host:%s:%s -boot d -cdrom %s.iso -m 2024"%(var1,val1,date1,date2,var2))
		  os.system("./sqemu64")
		if usb in ('no', 'n'):
		  val1=(random.randrange(10,99))
		  os.system("xdotool windowminimize $(xdotool getactivewindow); qemu-system-x86_64 --enable-kvm -cpu host -smp cores=2 -hda %s.img -boot menu=on -vga vmware -net tap -net nic,macaddr=52:54:00:12:34:%d,model=e1000 -soundhw all -boot d -cdrom %s.iso -m 2024"%(var1,val1,var2))
		  os.system("./sqemu64")
live()

def sistemi():
	if select == 12:
		subprocess.call("ls *.img", shell=True)
		print
		restart = raw_input("Premere INVIO per continuare")
		os.system("./sqemu64")
sistemi()

def folder():
	if select == 11:
		subprocess.call("xdg-open .", shell=True)
		os.system("./sqemu64")
folder()

def plugin():
	if select == 13:
		# Controllo riconoscimento privilegi root
                log = os.system("grep -om1 sudo $HOME/.bash_history > log")
                check = open("log", "r")
                root = check.read(4 - 0)
                if root == "sudo":
                    subprocess.call("sudo apt-get install xdotool && sudo apt-get install dmg2img && sudo apt-get install vinagre", shell=True)
		    print
		    print "Installazione completata!"
		    print
		    time.sleep(3)
		    restart = raw_input("Premere INVIO per continuare")
		    os.system("./sqemu64")
                else:
                    subprocess.call("su root -c 'apt-get update' && su root -c 'apt-get install xdotool dmg2img vinagre'", shell=True)
                    print
                    print "Installazionne completata!"
                    print
                    time.sleep(3)
                    restart = raw_input("Premere INVIO per continuare")
                    o.system("./sqemu64")
plugin()

def dischi():
	if select == 6:
		var1 = raw_input("Nome del disco primario: ")
		var2 = raw_input("Nome del disco secondario: ")
		var3 = raw_input("Quanta RAM? (es. 512M o 2047M) ")
		var4 = input("Numero di CPU/Core da dedicare: ")
                val1=(random.randrange(10,99))
                os.system("xdotool windowminimize $(xdotool getactivewindow); qemu-system-x86_64 --enable-kvm -cpu host -smp %s -hda %s.img -hdb %s.img -vga vmware -net tap -net nic,macaddr=52:54:00:12:34:%d,model=e1000 -soundhw all -m %s"%(var4,var1,var2,val1,var3))
		os.system("./sqemu64")
dischi()

def livemulti():
	if select == 8:
		var1 = raw_input("Nome del disco primario: ")
		var3 = raw_input("Nome del disco secondario: ")
		var2 = raw_input("Nome CD Iso: ")
		val1=(random.randrange(10,99))
		os.system("xdotool windowminimize $(xdotool getactivewindow); qemu-system-x86_64 --enable-kvm -cpu host -hda %s.img -hdb %s.img -vga std -net tap -net nic,macaddr=52:54:00:12:34:%d,model=e1000 -soundhw all -boot d -cdrom %s.iso -m 512"%(var1,var3,val1,var2))
		os.system("./sqemu64")
livemulti()

def resize():
	if select == 4:
		var1 = raw_input("Nome del disco da ridimensiona: ")
		var2 = raw_input("Nuova capacità disco: (G=Giga M=Mega es. 8G) ")
		os.system("qemu-img resize %s.img %s"%(var1,var2))
		os.system("./sqemu64")
resize()

def clone():
	if select == 4.5:
		var1 = raw_input("Nome del disco originale: ")
		var2 = raw_input("Nome della clonazione: ")
		print
		print "Attendere prego..."
		os.system("cp %s.img %s.img"%(var1,var2))
		print
		print "Operazione eseguita!"
		print
		time.sleep(2)
		os.system("./sqemu64")
clone()

def spice():
	if select == 10:
                print
                print bcolors.OKGREEN + "Launch comand line: spicec -h 127.0.0.1 -p port" + bcolors.ENDC
                print bcolors.OKGREEN + "Exit mouse grab press key Shift+F12" + bcolors.ENDC
		print
                var1 = raw_input("Nome del disco creato: ")
		var2 = raw_input("Quanta RAM? (es. 512M o 2047M) ")
		var3 = input("Numero di CPU/Core da dedicare: ")
                var4 = input("Port: ")
		val1=(random.randrange(10,99))
		os.system("xdotool windowminimize $(xdotool getactivewindow); kvm --enable-kvm -cpu host -smp %s -vga vmware -net tap -net nic,macaddr=52:54:00:12:34:%d,model=e1000 -soundhw all -spice port=%s,addr=127.0.0.1,disable-ticketing -hda %s.img -m %s"%(var3,val1,var4,var1,var2))
		os.system("./sqemu64")
spice()

# L'opzione successiva è valido solo per sistemi operativi minimali, cioè con la sola shell.
# Nominare l'immagine in shell.img
# Una volta avviata la shell editare il file /etc/default/grub e aggiungere l'opzione per variare la risoluzione:
# GRUB_GFXMODE=1024x764x32
# GRUB_GFXPAYLOAD_LINUX=keep o 1024x764

def shell():
	if select == 9:
		var1 = raw_input("Quanta RAM? (es. 512M o 2047M) ")
		var2 = input("Numero di CPU/Core da dedicare: ")
		usb = raw_input("Avviare con device Usb? ")
		if usb in ('si', 's'):
                    print "Inserire la chiavetta USB e lanciare il comando: dmesg | grep usb | grep idVendor"
                    date1 = input("idVendor= ")
                    date2 = input("idProduct= ")
                    os.system("xdotool windowminimize $(xdotool getactivewindow); sudo qemu-system-x86_64 --enable-kvm -cpu host -smp %s -vga vmware -netdev tap,id=t0,ifname=tap0,script=no,downscript=no -device e1000,netdev=t0,id=nic0 -hda shell.img -usb -usbdevice host:%d:%d -m %s"%(var2,date1,date2,var1))
                    os.system("./sqemu64")
                if usb in ('no', 'n'):
                    os.system("xdotool windowminimize $(xdotool getactivewindow); qemu-system-x86_64 --enable-kvm -cpu host -smp %s -vga vmware -netdev tap,id=t0,ifname=tap0,script=no,downscript=no -device e1000,netdev=t0,id=nic0 -hda shell.img -m %s"%(var2,var1))
		os.system("./sqemu64")
shell()
